#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'fileutils'
require 'psych'
require 'boom'

APP_NAME = 'boom'
#TODO make configurable?
DESKTOP_DIR = File.expand_path('~/Desktop/')
DEFAULT_PROJECTS_DIRECTORY = "~/Documents/#{APP_NAME}/"
HELP_STRING = "#{APP_NAME} helps maintain your OS X desktop. Use #{APP_NAME} so that your desktop 
only contains files and folders for the current project you are 
working on.

When you switch projects, the files and folders in the desktop will 
be kept and tagged with the project's name so it can be restored 
later by #{APP_NAME} again.

Assuming you are current working on project `A`, to switch to the 
project called `B`, run

  $ #{APP_NAME} B

Files and folders in the desktop will be moved away and tagged as 
belonging to project `A` and the files and folders for project `B` 
will be moved to the desktop.

If `B` doesn't exist yet, it will be created.

"

program :version, DesktopBoom::VERSION
program :description, HELP_STRING
program :help, 'Author', 'Hwee-Boon Yar <hboon@motionobj.com>'

default_command :switch

def config_path
  File.expand_path("~/.config/#{APP_NAME}.yml")
end

def with_config(&block)
  File.open(config_path) do |f|
    mapping = Psych.load(f.read)
    projects_directory = mapping['projects_directory']
    current_project = mapping['current_project']
    block.call(mapping, projects_directory, current_project)
  end
end

def projects
  with_config do |mapping, projects_directory, current_project|
    return Dir.entries(File.expand_path(projects_directory)).reject {|e| e == '.' || e == '..' || !File.directory?(File.expand_path(e, projects_directory))}
  end
end

def entries_in_dir(dir)
  entries = Dir.entries(dir).reject {|e| e == '.' || e == '..' || e.start_with?('.')}
end

command :switch do |c|
  c.syntax = "#{APP_NAME} [switch] <project name>"
  c.summary = 'Switch project'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.action do |args, options|
    say_error "Specify the name of the project you want to switch to. If the project 
doesn't exist, it will be created:

    #{c.syntax}

or for help:

    #{APP_NAME} --help
" and abort if args.empty?
    new_project = args[0]
    create_configuration_file unless File.file? config_path
    with_config do |mapping, projects_directory, current_project|
      say_error "Project `#{new_project}` does not exist. Create with:

      #{APP_NAME} create #{new_project}
" and abort unless (projects + [current_project]).include? new_project
      if new_project == current_project
        say "Already at project '#{current_project}'"
        break
      end
      move_desktop_to_project(current_project, projects_directory)
      switch_to(mapping, new_project)
      move_project_to_desktop(new_project, projects_directory)
    end
  end
end

command :create do |c|
  c.syntax = "#{APP_NAME} create <project name>"
  c.summary = 'Create project'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.action do |args, options|
    say_error "Specify the name of the project you want to create:

    #{c.syntax}

or for help:

    #{APP_NAME} --help
" and abort if args.empty?
    new_project = args[0]
    create_configuration_file unless File.file? config_path
    with_config do |mapping, projects_directory, current_project|
      say_error "Project already exist: `#{new_project}`" and abort if (projects + [current_project]).include? new_project
      FileUtils.mkdir_p(File.expand_path(new_project, projects_directory))
    end
  end
end

command :current do |c|
  c.syntax = "#{APP_NAME} current"
  c.summary = 'Show the current project name'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.option '-s', 'Shorter format'
  c.action do |args, options|
    create_configuration_file unless File.file? config_path
    with_config do |mapping, projects_directory, current_project|
      if current_project && !current_project.empty?
        say current_project
      else
        if options.s
          say "-"
        else
          say "No project open. To switch to a project run:

    #{APP_NAME} [switch] <project name>

To see a list of projects:

    #{APP_NAME} list
"
        end
      end
    end
  end
end

command :list do |c|
  c.syntax = "#{APP_NAME} list"
  c.summary = 'Show list of projects'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.option '-l', 'List in long format'
  c.action do |args, options|
    create_configuration_file unless File.file? config_path
    with_config do |mapping, projects_directory, current_project|
      projects.each do |e|
        if e == current_project
          if options.l
            entries = entries_in_dir(File.expand_path(DESKTOP_DIR))
            say "* #{e} (#{entries.size})"
          else
            say "* #{e}"
          end
        else
          if options.l
            entries = entries_in_dir(File.expand_path(e, projects_directory))
            say "  #{e} (#{entries.size})"
          else
            say "  #{e}"
          end
        end
      end
    end
  end
end

command :rename do |c|
  c.syntax = "#{APP_NAME} rename <source> <target>"
  c.summary = 'Rename project'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.action do |args, options|
    say_error "You must specify both the original project name and the new project name
  #{c.syntax}
    " and abort unless args.size == 2
    with_config do |mapping, projects_directory, current_project|
      source = args[0]
      destination = args[1]
      say_error "Project does not exist: `#{source}`" and abort unless (projects + [current_project]).include? source
      say_error "There is an existing project with the name: `#{destination}`" and abort if (projects + [current_project]).include? destination
      switch_to(mapping, destination) if current_project == source
      FileUtils.mv(File.expand_path(source, projects_directory), File.expand_path(destination, projects_directory))
    end
  end
end

command :browse do |c|
  c.syntax = "#{APP_NAME} browse [<project name>]"
  c.summary = 'Browse project(s) directory'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.action do |args, options|
    say_error "Specify at most 1 project name
  #{c.syntax}
    " and abort unless args.empty? || args.size == 1
    with_config do |mapping, projects_directory, current_project|
      project = args[0]
      if project
        if current_project == project
          `open "#{File.expand_path(project, DESKTOP_DIR)}"`
        else
          `open "#{File.expand_path(project, projects_directory)}"`
        end
      else
        `open "#{File.expand_path(projects_directory)}"`
      end
    end
  end
end

command :close do |c|
  c.syntax = "#{APP_NAME} close"
  c.summary = 'Close current project'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.action do |args, options|
    create_configuration_file unless File.file? config_path
    with_config do |mapping, projects_directory, current_project|
      break unless current_project && !current_project.empty?
      move_desktop_to_project(current_project, projects_directory)
      switch_to(mapping, '')
    end
  end
end

command :move do |c|
  c.syntax = "#{APP_NAME} move <source file/folder> ... <project name>"
  c.summary = 'Move file(s)/folders(s) in current project to another projects'
  c.description = c.summary
  c.example 'Run command', c.syntax
  c.action do |args, options|
    say_error "Specify the name(s) of the file(s)/folders(s) in the current project 
which you want to move and the project to move to

    #{c.syntax}

or for help:

    #{APP_NAME} --help
" and abort if args.size < 2
    target_project = args.last
    sources = args.first(args.size-1)
    create_configuration_file unless File.file? config_path
    with_config do |mapping, projects_directory, current_project|
      if !current_project || current_project.empty?
        say_error "No open project" and abort
        break
      end
      unless (projects + [current_project]).include? target_project
        say_error "Project does not exist: `#{target_project}`" and abort
        break
      end
      if target_project == current_project
        say "Already at project '#{current_project}'"
        break
      end
      if target_project == current_project
        say "Already at project '#{current_project}'"
        break
      end
      source_not_found = sources.find {|e|
        exist = File.exists?(File.expand_path(e, DESKTOP_DIR))
        !exist
      }
      say_error "Item is not in current project: `#{source_not_found}`" and abort if source_not_found
      destination_dup = sources.find {|e|
        exist = File.exists?(File.expand_path(e, File.expand_path(target_project, projects_directory)))
        exist
      }
      say_error "There is already an item with the name: `#{destination_dup}` in the project `target_project`" and abort if destination_dup
      sources.each {|e| FileUtils.mv(File.expand_path(e, DESKTOP_DIR), File.expand_path(target_project, projects_directory)) }
    end
  end
end

def create_configuration_file
  write_configuration(nil)
end

def write_configuration(contents)
  config_dir = File.dirname(config_path)
  contents ||= {'projects_directory' => DEFAULT_PROJECTS_DIRECTORY}
  FileUtils.mkdir_p(config_dir) unless File.directory? config_dir
  File.open(config_path, 'w') {|f| f.write(Psych.dump(contents))}
end

def move_dir_contents(from_dir, to_dir)
  entries = Dir.entries(from_dir).reject {|e| e == '.' || e == '..'}
  FileUtils.mkdir_p(to_dir) unless File.directory? to_dir
  entries.each {|e| FileUtils.mv(File.expand_path(e, from_dir), File.expand_path(e, to_dir))}
end

def switch_to(mapping, new_project)
  mapping['current_project'] = new_project
  write_configuration(mapping)
end

def move_desktop_to_project(current_project, projects_directory)
  return unless current_project
  project_dir = File.expand_path(current_project, projects_directory)
  move_dir_contents(DESKTOP_DIR, project_dir)
end

def move_project_to_desktop(new_project, projects_directory)
  project_dir = File.expand_path(new_project, projects_directory)
  unless File.directory? project_dir
    FileUtils.mkdir_p(project_dir) 
    say "New project created '#{new_project}'"
  end
  move_dir_contents(project_dir, DESKTOP_DIR)
  say "Switched to project '#{new_project}'"
end
